name: Build and Test WasmEdge (riscv64, ccache, ninja)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-qemu:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v4

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-riscv-${{ runner.os }}-${{ hashFiles('cmake/riscv-toolchain.cmake') }}-${{ github.sha }}
          restore-keys: |
            ccache-riscv-${{ runner.os }}-

      - name: Install host deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ccache ninja-build cmake build-essential pkg-config zlib1g-dev wget rsync \
            gcc-riscv64-linux-gnu g++-riscv64-linux-gnu wabt llvm-15-dev liblld-15-dev

      - name: Configure ccache and env
        run: |
          ccache -M 5G
          echo "CCACHE_DIR=${HOME}/.ccache" >> $GITHUB_ENV
          echo "CC=ccache riscv64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=ccache riscv64-linux-gnu-g++" >> $GITHUB_ENV

      - name: Build (cross) and install
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=./cmake/riscv-toolchain.cmake \
            -DCMAKE_MAKE_PROGRAM=$(which ninja) \
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/riscv-install \
            ..
          cmake --build . --target wasmedge wasmedgec -j$(nproc)
          cmake --install . --prefix ${GITHUB_WORKSPACE}/riscv-install

      - name: Verify installed artifacts
        run: |
          file ${GITHUB_WORKSPACE}/riscv-install/bin/wasmedge || true
          ${GITHUB_WORKSPACE}/riscv-install/bin/wasmedge -v || true
          ${GITHUB_WORKSPACE}/riscv-install/bin/wasmedgec -v || true

      - name: Enable QEMU for riscv64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: riscv64

      - name: Run minimal QEMU test in riscv container
        run: |
          docker run --rm --platform linux/riscv64 \
            -v "${{ github.workspace }}/riscv-install":/opt/install \
            debian:bookworm-slim \
            bash -lc "\
              apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
                libc6 libstdc++6 libgcc-s1 llvm-15 lld-15 ca-certificates && \
              /opt/install/bin/wasmedge -v && \
              /opt/install/bin/wasmedgec -v || true"
