name: Build and Test WasmEdge on riscv64 arch

concurrency:
  group: build-riscv64-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "test/**"
      - "!test/plugins/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - 'proposal/**'
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "test/**"
      - "!test/plugins/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

permissions:
  contents: read

jobs:
  # TODO: Refactor `lint` with `on.workflow_run`
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  lint:
    uses: ./.github/workflows/reusable-call-linter.yml

  build_riscv64:
    name: RISC-V64
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
    - name: Ensure git safe directory
      run: |
        git config --global --add safe.directory $(pwd)
    - uses: uraimo/run-on-arch-action@aa8e672a03e10b403401927ea2ceda57e1b68ac3 # v3
      name: Build WasmEdge
      with:
        arch: riscv64
        distro: ubuntu22.04
        githubToken: ${{ github.token }}
        dockerRunArgs: |
          --volume "${PWD}:/workplace"
          --platform linux/riscv64
        shell: /bin/sh
        install: |
          apt update
          apt install -y build-essential cmake git wget ca-certificates \
            gcc-riscv64-linux-gnu g++-riscv64-linux-gnu libc6-dev-riscv64-cross \
            llvm-15-dev liblld-15-dev zlib1g-dev wabt python3 pkg-config
        run: |
          cd /workplace
          mkdir -p build && cd build
          cat > riscv-toolchain.cmake << 'EOF'
          # RISC-V Cross-compilation Toolchain for WasmEdge
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR riscv64)
          set(CMAKE_C_COMPILER riscv64-linux-gnu-gcc)
          set(CMAKE_CXX_COMPILER riscv64-linux-gnu-g++)
          set(CMAKE_ASM_COMPILER riscv64-linux-gnu-gcc)
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=rv64gc -mabi=lp64d")
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=rv64gc -mabi=lp64d")
          set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG")
          set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
          set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
          set(CMAKE_FIND_ROOT_PATH "${find_root_list}")
          EOF

          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=../riscv-toolchain.cmake \
          -DLLVM_DIR=/usr/lib/llvm-15/lib/cmake/llvm \
          -DLLVM_CONFIG_EXECUTABLE=/usr/bin/llvm-config-15 \
          ..

          make -j$(nproc)
          make install
          wasmedge -v
          wasmedgec -v
          wasmedge compile -h
          wasmedge run -h
          cd ../examples/wasm
          wat2wasm fibonacci.wat -o fibonacci.wasm
          wasmedgec fibonacci.wasm fibonacci_aot_c.wasm
          wasmedge --reactor fibonacci_aot_c.wasm fib 30
          wasmedge run --reactor fibonacci_aot_c.wasm fib 30
          wasmedge compile fibonacci.wasm fibonacci_aot_compile.wasm
          wasmedge --reactor fibonacci_aot_compile.wasm fib 30
          wasmedge run --reactor fibonacci_aot_compile.wasm fib 30
