name: Build and Test WasmEdge on riscv64 arch

concurrency:
  group: build-riscv64-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "test/**"
      - "!test/plugins/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"
  pull_request:
    branches:
      - master
      - 'proposal/**'
    paths:
      - ".github/workflows/build_for_riscv.yml"
      - "include/**"
      - "lib/**"
      - "test/**"
      - "!test/plugins/**"
      - "thirdparty/**"
      - "tools/**"
      - "CMakeLists.txt"
      - "cmake/**"

permissions:
  contents: read

jobs:
  # TODO: Refactor `lint` with `on.workflow_run`
  # https://docs.github.com/en/actions/using-workflows/triggering-a-workflow
  lint:
    uses: ./.github/workflows/reusable-call-linter.yml

  cross_compile_riscv64:
    name: Cross-compile for RISC-V64
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      artifact-name: ${{ steps.artifact.outputs.name }}
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        
    - name: Ensure git safe directory
      run: |
        git config --global --add safe.directory $(pwd)
        
    - name: Install RISC-V cross-compilation toolchain
      run: |
        chmod +x utils/setup-riscv-cross.sh
        ./utils/setup-riscv-cross.sh
        
    - name: Cross-compile WasmEdge for RISC-V64
      run: |
        mkdir -p build && cd build
        cmake -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=../cmake/riscv64-linux-gnu.cmake \
              -DWASMEDGE_BUILD_TESTS=ON \
              -DWASMEDGE_BUILD_TOOLS=ON \
              -DWASMEDGE_BUILD_SHARED_LIB=ON \
              -DWASMEDGE_USE_LLVM=OFF \
              -DWASMEDGE_BUILD_PLUGINS=OFF \
              ..
        make -j $(nproc)
        
    - name: Package build artifacts
      id: artifact
      run: |
        mkdir -p riscv64-artifacts
        cp -r build/lib riscv64-artifacts/
        cp -r build/tools riscv64-artifacts/
        cp -r build/test riscv64-artifacts/
        cp -r examples riscv64-artifacts/
        echo "name=riscv64-build-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        
    - name: Upload artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: ${{ steps.artifact.outputs.name }}
        path: riscv64-artifacts/
        retention-days: 1

  test_riscv64:
    name: Test on RISC-V64 with QEMU
    runs-on: ubuntu-latest
    needs: cross_compile_riscv64
    steps:
    - name: Harden the runner (Audit all outbound calls)
      uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
      with:
        egress-policy: audit

    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0
        
    - name: Download artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: ${{ needs.cross_compile_riscv64.outputs.artifact-name }}
        path: riscv64-artifacts/
        
    - uses: uraimo/run-on-arch-action@aa8e672a03e10b403401927ea2ceda57e1b68ac3 # v3
      name: Test WasmEdge on RISC-V64
      with:
        arch: riscv64
        distro: ubuntu22.04
        githubToken: ${{ github.token }}
        dockerRunArgs: |
          --volume "${PWD}:/workplace"
        shell: /bin/sh
        install: |
          apt-get update -q -y
          apt-get install -q -y wabt timeout # For generating wasm and test timeouts
        run: |
          chmod +x /workplace/utils/test-riscv-qemu.sh
          /workplace/utils/test-riscv-qemu.sh
